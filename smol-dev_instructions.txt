"# Automatic package installer for R

Build an automatic package installer from different package repositories

### Tech stack

- Bash with conda

### Features

- create an activate new conda environment if doesn't exist as first bash argument
- install packages based on user input in pkg_file.txt (second bash argument) with package name and repository
- install from CRAN, Bioconductor, Conda, or github 
- includes mandatory installation of devtools package to handle github installations 


Use the following bash code as a template: 

#!/bin/bash

install_conda_pkgs() {
  env_name="$1"
  pkg_input="$2"

  # List to hold packages that failed to install
  failed_pkgs=()

  # Check if conda environment already exists
  env_exists=$(conda env list | awk '{print $1}' | grep -w $env_name)
  if [[ -z $env_exists ]]; then
    conda create -n $env_name r-base -y 2>&1 | tee install.log
  fi

  # Activate the environment
  conda activate $env_name

  # Initialize an empty string for R named list elements
  pkgs_r=""

  # Initialize indexed arrays for Conda and Pip packages
  conda_pkgs=()
  pip_pkgs=()

  # Check if the package input is a file or a string
  if [[ -f $pkg_input ]]; then
    while IFS="=" read -r key value; do
      if [[ $key =~ ^# ]]; then continue; fi  # Skip comment lines
      if [[ $value == GitHub* ]]; then
        repository=${value#GitHub:}
        pkgs_r+="${key}=\"${repository}\","
        value="GitHub"
      else
        pkgs_r+="${key}=\"${value}\","
      fi
      if [[ $value == conda ]]; then
        conda_pkgs+=("$key")
      elif [[ $value == pip ]]; then
        pip_pkgs+=("$key")
      fi
    done < "$pkg_input"
  fi

  # Remove trailing comma and wrap the elements in list()
  pkgs_r=${pkgs_r%,}
  pkgs_r="list(${pkgs_r})"

  # Debug: Print pkgs_r
  echo "Debug: pkgs_r is $pkgs_r" | tee -a install.log

  # R script for package installation
  Rscript - <<EOF | tee -a install.log
    options(repos = 'https://cran.r-project.org')  # Set CRAN mirror
    failed_r_pkgs <- character(0)
    pkgs <- $pkgs_r
    for (pkg in names(pkgs)) {
      source <- pkgs[[pkg]]
      if (!require(pkg, character.only = TRUE)) {
        tryCatch({
          if (source == "CRAN") install.packages(pkg)
          else if (source == "Bioconductor") {
            if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")
            BiocManager::install(pkg)
          } else if (source == "GitHub") devtools::install_github(pkg)
        },
        error = function(e) {
          message(paste0("Could not install ", pkg, " through ", source))
          failed_r_pkgs <- c(failed_r_pkgs, pkg)
        })
      }
    }
    if (length(failed_r_pkgs) > 0) {
      message(paste0("Failed to install the following R packages: ", paste(failed_r_pkgs, collapse = ", ")))
      write(paste(failed_r_pkgs, collapse = ","), "failed_r_packages.txt")
    }
EOF

  # Install Conda packages
  for pkg in "${conda_pkgs[@]}"; do
    installed=false
    for channel in "conda-forge" "r" "bioconda"; do
      conda run -n $env_name conda install -c $channel r-$pkg -y 2>&1 | tee -a install.log && { installed=true; break; }
    done
    if [[ $installed == false ]]; then
      failed_pkgs+=("r-$pkg (Conda)")
    fi
  done

  # Install Pip packages
  for pkg in "${pip_pkgs[@]}"; do
    conda run -n $env_name pip install $pkg 2>&1 | tee -a install.log || failed_pkgs+=("$pkg (pip)")
  done

  # Print the list of failed packages
  if [ ${#failed_pkgs[@]} -ne 0 ]; then
    echo "The following packages failed to install:" | tee -a install.log
    for pkg in "${failed_pkgs[@]}"; do
      echo "  - $pkg" | tee -a install.log
    done
  else
    echo "All packages installed successfully." | tee -a install.log
  fi
}

# Example usage
# install_conda_pkgs "my_env" "pkg_list.txt"
# install_conda_pkgs "my_env" "CRAN:data.table"

